[ Estrutura de Layout de projetos utilizada pela comunidade]
https://github.com/golang-standards/project-layout

/internal = Onde roda a aplicação, e contém coisas somente da aplicação, sem ser reaproveitado em outras aplicações. ( Não permite que seja importado em outras aplicações ou bibliotecas)

/pkg = Bibliotecas que são publicas, que podem ser utilizadas em diversos projetos e externamente.

/cmd = Onde fica o Executavel
> /cmd/meu-app = Onde fica o nome da aplicação

/configs = Padrões de variaveis de ambiente, configurações ou templates de configurações

/test = Arquivos adicionais que ajudam em teste: Docs de Testes, Exemplos, Stubs, Arquivos Http, etc

/api = OpenAPi/Swagger specs, JSON schema files, Arquivos de definição de protocolos.

________________________________________
[ Criar o gerenciador dos pacotes / package.lock ]
> go mod init 'github.com/você/seuProjeto/Pacote' (pode ser um nome personalizado ou o URL do repositório)

[ Criar o gerenciador de workspaces para modulos locais ]
> go work init ./modulo1 ./modulo2` (Na pasta parente do projeto)

[ Organizar e arrumar pacotes ]
> go mod tidy
> go mod tidy -e (flag para ignorar erros relacionados à importação de dependências locais)

[ Pegar pacotes externos / (npm i "pacote")]
> go get github.com/mattn/go-sqlite3

________________________________________
[ Rodar e startar arquivo go]
> go run arquivo.go

[ Gerar Build ]
> GOOS=windows go build arquivo.go ( Especifica o OS)
> go build arquivo.go

________________________________________
[ Testar ]
> go test . (Diretorio atual)
> go test ./... (Todas as pastas e pastas aninhadas)
> go test (Pacote atual)
> go test -coverprofile=coverage.out (Gera arquivo coverage e testa se engloba todas os cases)
> go tool cover -html=coverage.out (Lê arquivo coverage gerado e abre página web mostrando funções que faltam)
> go test -bench=. (Diretorio atual, Mostra o tempo de cada teste e configurações do sistema, como cpu, goos, goarch, pacote, nucleos, etc.)
> go test -bench=. -run=^# (Roda todos os testes que tenha o nome do regex)
> go test -bench=. -run=^# -count=10 (Roda todos os testes que tenha o nome do regex e executa 10 vezes)
> go test -bench=. -run=^# -count=10 -benchtime=3s (Continua rodando por 3 segundos cada função)
> go test -bench=. -run=^# -benchmem (Mostra o quanto de memória foi usado)
> go test -fuzz=. (Roda os testes de Fuzzing)
> go test -fuzz=. -fuzztime=5s (Tempo limite fazendo Fuzzing)
Flags:
-v  ( Executa os testes em modo verboso, mostrando detalhes de cada execução)
-coverprofile=coverage.out  ( Gera um relatório de cobertura que pode ser visualizado em um navegador para identificar quais partes do código foram testadas.)
-bench=.  ( Executa todos os benchmarks no pacote atual.)
-run=^#  ( Utilizado para rodar testes específicos com base em regex.)
-count=10  ( Define o número de vezes que os testes devem ser executados.)
-benchtime=3s  ( Define o tempo de execução de cada benchmark.)
-benchmem  ( Mostra a quantidade de memória alocada durante a execução do benchmark.)
-fuzztime=5s  ( Quantidade de tempo fazendo Fuzzing )