// Este c√≥digo mostra a preemp√ß√£o em a√ß√£o.
// Temos uma goroutine "ego√≠sta" que tenta usar 100% da CPU em um loop.
// Mesmo assim, a goroutine "educada" (na main) consegue imprimir mensagens.
// Isso prova que o scheduler est√° interrompendo o loop para dar a vez a outra.
package main

import (
	"fmt"
	"runtime"
	"time"
)

func main() {
	// Garante que o scheduler tenha n√∫cleos para trabalhar
	runtime.GOMAXPROCS(2)

	// Goroutine "ego√≠sta" que entra em um loop infinito
	go func() {
		fmt.Println("üî• Goroutine ego√≠sta iniciada!")
		// Desafia o scheduler com um loop sem pontos de coopera√ß√£o.
		for {
		}
	}()

	// A goroutine principal continua seu trabalho sem ser bloqueada.
	for i := 0; i < 10; i++ {
		fmt.Printf("‚úÖ Principal: Tick %d\n", i)
		// time.Sleep tamb√©m informa ao scheduler para executar outra coisa.
		time.Sleep(1 * time.Second)
	}

	fmt.Println("üéâ Principal terminada. O programa permaneceu responsivo!")
}

// Sa√≠da esperada:
// üî• Goroutine ego√≠sta iniciada!
// ‚úÖ Principal: Tick 0
// ‚úÖ Principal: Tick 1
// ... (e assim por diante)
// üéâ Principal terminada. O programa permaneceu responsivo!
